//-------------------------------------
const F_H = 20, F_W = 10; 		// размеры игрового поля
const C_E = 15; 			// значение в пустой ячейке
const FIG_S = 4; 			// максимальный размер фигуры
//-------------------------------------
const int colors [9] = { 15, 1, 2, 4, 5, 9, 10, 12, 13 }; // цвета
enum direction { D_LEFT, D_RIGHT, D_UP, D_DOWN };	  // направление
enum draw_mode { ALL, FIELD, BOX, SCORE, BACKGROUND };	  // режим прорисовки
//-------------------------------------
// структура, содержащая статистику игры
//-------------------------------------
struct tstat
	{
	long int best_score;	// лучший счет
	uint lines_count;	// счетчик линий
	uint figs_count;	// счетчик фигур
	long int score;		// текущий счет
	uint level;		// текущий уровень
	};
//-------------------------------------
// структура, содержащая информацию о фигуре
//-------------------------------------
struct finfo
	{
	uint color;		// цвет
	uint type;              // тип фигуры
	};
//-------------------------------------
// класс, реализующий конвейер фигур
//-------------------------------------
const PIPE_S = 3;		// длина конвейера
class tpipe
{
finfo elem[PIPE_S];		// массив описаний фигур
bool color_exists(uint c);	// проверка цвета на наличие в конвейере
bool type_exists(uint t);	// проверка типа на наличие в конвейере
void add(uint id);              // добавление фигуры в конвейер
public:         	
tpipe();	                // конструктор
finfo pop();			// извлечение фигуры из конвейера
};
//-------------------------------------
// класс, реализующий работу с матрицей
// 10х20 ячеек
//-------------------------------------
class tmatrix
{
public:
uint elem [F_H][F_W];		// матрица
tmatrix() { reset(); };		// конструктор
void reset();			// заполнение матрицы, используя C_E
bool append(tmatrix &m);	// обьединение матриц
bool cross(tmatrix &m);	// проверка матриц на пересечение
};
//-------------------------------------
// класс, реализующий работу с фигурой
//-------------------------------------
class tfigure: public tmatrix
{
public:
bool shift(direction d);	// сдвиг фигуры
bool spin();			// вращение фигуры
bool move(direction d, tmatrix &m); // сдвиг с проверкой на пересечение
bool rotate(tmatrix &m);		  // вращение с проверкой на пересечение
};
//-------------------------------------
// класс, реализующий окно "next figure"
//-------------------------------------
class tbox: public tfigure
{
void extract(tfigure &f);	// инициализация фигуры
public:
tpipe pipe;			// конвейер описаний фигур
tfigure next;			// следующая фигура
tbox();				// конструктор
void get(tfigure &f);		// инициализация с выравнивание
};
//-------------------------------------
// класс, реализующий таймер в игре
//-------------------------------------
class ttimer
{
clock_t begin;			// начала такта
double idle;                    // задержка между тактами
public:
ttimer() { idle = CLK_TCK; }	// конструктор
bool check_time();		// проверка такта на завершение
void decr();			// уменьшение задержки
void reset() { begin = NULL; };	// сброс таймера
};
//-------------------------------------
// класс, реализующий игровое поле
//-------------------------------------
class tfield: public tmatrix
{
int find_line();		// поиск линии
void cut_off(int i);		// удаление линии
int cut_off_all();		// удаление всех линий
public:
tstat stat;			// статистика игры
tfield();			// конструктор
~tfield();			// деструктор
tbox box;			// компонент класс, реализующий "next figure"
ttimer timer;	                // таймер
tfigure figure;			// текущая фигура
void draw(draw_mode dm);	// прорисовка игрового поля
bool new_figure();		// добавление новой фигуры
void new_game();		// инициализация новой игры
};
//-------------------------------------
#include "classes.cpp"
//-------------------------------------